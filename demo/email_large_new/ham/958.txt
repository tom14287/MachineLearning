re: anolth sequenc relat tracebacki have some patch that seem to fix/avoid thi problem now.   (it is
amaz what on can achiev when main power fail, long enough for
up's to run out, and all that is left oper is the laptop and
it batteri suppli...)

first, i put in some defens code into the area where the problem wa
occur, so that if exmh is attempt (for ani reason) to expand a
sequenc that isn't either a number, or a rang of number (or a list of
such thing) it will simpli ignor the trash, rather than give a traceback.
thi on solv the initi problem:

--- mh.tcl.wa	thu aug 22 21:15:06 2002
+++ mh.tcl	wed aug 28 12:39:11 2002
@@ -487,6 +487,10 @@
     set seq {}
     set rseq {}
     foreach rang [split [string trim $sequenc]] {
+	if ![regexp {^[0-9]+(-[0-9]+)?$} $rang] {
+	    # just ignor anyth bogu
+	    continu;
+	}
 	set part [split [string trim $rang] -]
 	if {[llength $part] == 1} {
 	    lappend seq $part


that is amend proc mhseqexpand which is where the error wa occur
befor (the code assum that $rang is either nnn or nnn-mmm so we should
probabl make sure that's true - issu an error instead of just "continu"
if you like, but i don't think an error is need).

but that just allow me to creat a similar problem, in anoth place,
by type "nnn-" ... and rather than continu to fight fire like thi,
i thought i should think more about brent's suggest.   but rather than
have the select code actual valid the input, which would mean it
would have to know what is to be valid, i decid that the right thing to
do is just to ignor ani error caus by invalid input, so i just stuck
a "catch" around the msgshow that is process the nonsens that the
user ha type.

thi wai, ani later expans to what msgshow treat as legal (mayb
allow a sequenc name, like "prev" or "next", or anyth els can
be handl just there, without someon need to rememb that thei have
to go fix the select process code to allow it.

but, while i wa plai there, i notic someth i never new befor.
if you type "66+" the "66" chang to "67" (and so on, for each + that
is type).   i suspect that's perhap an artifact of "+ is bound to a
differ function so it can be us as a toggl between chang the
current and the target folder, but it ha to mean someth if the current
input mode is a messag number, so let it mean...", but now i found it,
i think it nice.    but if we can type 66+ why not 66- as well?  that
kind of limit bug me, so i fix it.

and then i wonder about folder with name contain '+' - the special
us of + as the toggl charact mean there's no wai to type those from
the keyboard.   so i fix that as well.   thi make two differ
restrict - there's no wai to type a folder name that ha a name
begin with '+' (but such a thing in mh would be a pain to us anywai,
so i doubt thi will bother anyon), and it is now onli possibl to
toggl between type the current & target folder name when the name
be type is empti.   i'm less happi about that part, but i think i
can live with it in order to allow folder name with +'s in them to
exist and be type.

then, sinc i wa there anywai, i decid to do someth about anoth
featur that ha alwai bug me.   in "normal" keyboard mode, 's' is
the kei us to show a messag.    but if you've just type 123, and
the ftoc is highlight 123 as the current messag, and you want to now
show that messag, you can't type 's', you have to type \r instead.
so i "fix" thi on as well.   "fix" here is in quot, as it assum
that the keybind for msgshow is 's', if you chang that to someth
els, it will remain 's' in here.   i don't know enough tk/tcl to have it
discov what kei is bound to a function in the extern world in order
to bind the same on here.   \r continu to work of cours.

and now i got start in fix irrit in thi code, i also made it
clear the statu line if you abort messag/folder entri mode (^c or ^g).
previous it us to leav the prompt sit there until the next
messag appear, which made it less than obviou that the keyboard had
revert to it usual bind.

in ani case, what follow is the patch that doe all of that.   i believ
that if you appli thi, then the on abov is probabl not need, the
"catch" around the "msgshow" will hide the problem (i don't think we realli
need to fix brent's wai of invok it).   or includ it anywai, just
for complet (i haven't run an exmh with the follow patch, but not
the previou on, so i don't know for sure that all will be ok then).

kre

--- select.tcl.wa	thu aug 22 21:15:07 2002
+++ select.tcl	wed aug 28 13:36:17 2002
@@ -49,9 +49,11 @@
     bindtag $w [list $w entri]
     bind $w 	{selecttypein %w %a}
     bind $w 	{selecttoggl %w }
+    bind $w 	{selectprev %w }
     bind $w 	{selectcomplet %w}
     bind $w 	{selectcomplet %w}
     bind $w 	{selectreturn %w}
+    bind $w 	{selectreturn %w %a}
     bind $w 	{selectbackspac %w}
     bind $w 	{selectbackspac %w}
     bind $w 	{selectbackspac %w}
@@ -72,7 +74,7 @@
     append select(sel) $a
     exmh_statu "$select(prompt) $select(sel)"
     if ![info exist select(folder)] {
-	msg_chang $select(sel) noshow
+	catch { msg_chang $select(sel) noshow }
     }
 }
 proc selectbackspac { w } {
@@ -91,6 +93,10 @@
 proc selecttoggl {w} {
     global select
     if [info exist select(folder)] {
+	if {$select(sel) != ""} {
+	    selecttypein $w +
+	    return
+	}
 	set select(toggl) [list [lindex $select(toggl) 1] [lindex $select(toggl) 0]]
 	set select(prompt) "[lindex $select(toggl) 0] folder:"
     } els {
@@ -101,6 +107,18 @@
     }
     exmh_statu "$select(prompt) $select(sel)"
 }
+proc selectprev {w} {
+    global select
+    if [info exist select(folder)] {
+	selecttypein $w "-"
+    } els {
+	catch {
+	    incr select(sel) -1
+	    msg_chang $select(sel) noshow
+	}
+        exmh_statu "$select(prompt) $select(sel)"
+    }
+}
 proc selectcomplet { w } {
     global select
     if [info exist select(folder)] {
@@ -126,9 +144,13 @@
 	exmh_statu "$select(prompt) $select(sel)"
     }
 }
-proc selectreturn { w } {
+proc selectreturn { w {a {}} } {
     global select
     if [info exist select(folder)] {
+	if {$a != {}} {
+	    selecttypein $w $a
+	    return
+	}
 	if [info exist select(match)] {
 	    set select(sel) $select(match)
 	    unset select(match)
@@ -151,6 +173,7 @@
 	unset select(folder)
     }
     $select(entri) configur -state disabl
+    exmh_statu ""
     exmh_focu
 }
 proc selectclear { w } {




_______________________________________________
exmh-worker mail list
exmh-worker@redhat.com
http://listman.redhat.com/mailman/listinfo/exmh-worker

